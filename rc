#!/bin/bash
alias ls='ls --color=auto -gGpvh --group-directories-first'
alias la='ls --color=auto -gGapvh --group-directories-first'

export CODE=$HOME/Code
export EDITOR=$(which vim)

function bashrc (){
	$EDITOR $CODE/sh/bashrc/rc && $EDITOR ~/.bashrc && exec bash
}
function code () {
	builtin cd $CODE/$1/$2 && ls
}
compl () {
    COMPREPLY=();
    local word="${COMP_WORDS[COMP_CWORD]}";
    if [ "$COMP_CWORD" -eq 1 ]; then
        COMPREPLY=($(compgen -W "$(dir $CODE)" -- "$word"));
    else
        local words=("${COMP_WORDS[@]}");
        unset words[0];
        unset words[$COMP_CWORD];
        local completions=$(dir -F $CODE/"${words[@]}");
        COMPREPLY=($(compgen -W "$completions" -- "$word"));
    fi
}
complete -F compl code
function gr (){
	echo "Password:"
	read -s password
	echo
	curl -u 7aske:$password https://api.github.com/user/repos -d "{\"name\":\"$1\"}"
	git init
	git remote add origin https://github.com/7aske/$1.git
}
function clone (){
	if [ "$#" -eq 2 ]
	then
		git clone https://github.com/$1/$2
	else
		git clone https://github.com/7aske/$1
	fi
}
function commit (){
	git add .&& git commit -m "$@"
}
function drycommit (){
	git commit --branch --dry-run
}
function push (){
    git push origin $(git branch | grep \* | awk '{print $2}') 
}
function pull (){
    git pull origin $(git branch | grep \* | awk '{print $2}') 
}
function git-srv-init () {
	dir=${PWD##*/}
	cmd1="mkdir -p /srv/git/repos/$dir.git"
	cmd2="cd /srv/git/repos/$dir.git && git init --bare"
	ssh git@nik-srv $cmd1&&
	ssh git@nik-srv $cmd2&& echo Done.
}
function git-srv-add-remote () {
	dir=${PWD##*/} 
	git remote add nik-srv git@nik-srv:/srv/git/repos/$dir.git
}
function git-rpi-init () {
	dir=${PWD##*/} 
	cmd1="mkdir -p /srv/git/repos/$dir.git"
	cmd2="cd /srv/git/repos/$dir.git && git init --bare"
	ssh git@nik-rpi $cmd1&&
	ssh git@nik-rpi $cmd2&& echo Done.
}
function git-rpi-add-remote () {
	dir=${PWD##*/} 
	git remote add nik-rpi git@nik-rpi:/srv/git/repos/$dir.git
}

alias cls='clear -x'
alias autoremove='sudo pacman -R $(pacman -Qdtq)'
alias ci='code-insiders'
alias chrome='google-chrome-stable'
alias dow='builtin cd $HOME/Downloads&& ls'
alias sha='builtin cd $HOME/Share&& ls'
alias doc='builtin cd $HOME/Documents&& ls'
alias pic='builtin cd $HOME/Pictures&& ls'
alias dro='builtin cd $HOME/Dropbox&& ls'
alias pub='builtin cd $HOME/Public&& ls'
alias shr='builtin cd /usr/share&& ls'
alias drc='builtin cd ~/.wine/drive_c&& ls'
alias etc='builtin cd /etc/&& ls'
alias gs=$CODE/c/cgs/build/cgs
alias go-serve='$CODE/go/basic-http-server-go/out/httpserver'
alias backl='xbacklight -set'
alias bell='xset -b'
alias bat='bat --paging never'
function cd (){
	case $1 in
		..)
			builtin cd ..&& ls;;
		...)	
			builtin cd ../..&& ls;;
		....)
			builtin cd ../../..&& ls;;
		.....)
			builtin cd ../../../../&& ls;;
		*)
			builtin cd "$@"&& ls;;
	esac
}

function hdmi() {
	case $1 in
		on*)	sudo intel-virtual-output;;
		off*)	sudo pkill intel-virtual-o;;
		*)	echo "usage: hdmi [on|off]";;
	esac
}

function e () {
	unameOut="$(uname -s)"
	case "${unameOut}" in
		Linux*)     machine=Linux;;
		Darwin*)    machine=Mac;;
		CYGWIN*)    machine=Cygwin;;
		MINGW*)     machine=MinGw;;
		*)          machine="UNKNOWN:${unameOut}"
	esac
	if test ${machine} = 'Linux'; then
		xdg-open "$@"
	else
		explorer "$@"&
	fi
}

function python(){
	unameOut="$(uname -s)"
	case "${unameOut}" in
		Linux*)     machine=Linux;;
		Darwin*)    machine=Mac;;
		CYGWIN*)    machine=Cygwin;;
		MINGW*)     machine=MinGw;;
		*)          machine="UNKNOWN:${unameOut}"
	esac

	if test ${machine} = 'MinGw'; then
		winpty python.exe "$@"
	else
		python3 "$@"
	fi
}

function purge () {
	for _ in {1..10}; do killall $1; done
}
function bandit () {
    if [ -z "$2" ]
    then
       ssh -p 2220 bandit$1@bandit.labs.overthewire.org
    else
        sshpass -p $2 ssh -o StrictHostKeyChecking=no -p 2220 bandit$1@bandit.labs.overthewire.org
    fi
}	

function dpi(){
    if [ -z  "$1" ]
    then
        xfconf-query -c xsettings -p /Xft/DPI -s 96
    else
        xfconf-query -c xsettings -p /Xft/DPI -s $1
    fi
}


if [ $TERM == "xterm-kitty" ]
then
	PS1='\[\033[01;34m\]>>=\u\[\033[01;37m\] \W \[\033[01;32m\]\[\033[01;33m\]$(git branch 2>/dev/null | sed -n "s/* \(.*\)/\1 /p")\[\033[01;34m\]=>\[\033[00m\] '
else
	PS1='\[\033[01;34m\]\u\[\033[01;37m\] \W \[\033[01;32m\]\[\033[01;33m\]$(git branch 2>/dev/null | sed -n "s/* \(.*\)/\1 /p")\[\033[01;34m\]\$\[\033[00m\] '
fi

if grep SSH_CLIENT <(env) &> /dev/null
then
	clear -x
	neofetch --config ~/.config/neofetch/config_ssh.conf 2> /dev/null
	export PS1='\[\033[01;35m\]\u@\h\[\033[01;37m\] \W \[\033[01;32m\]\[\033[01;33m\]$(git branch 2>/dev/null | sed -n "s/* \(.*\)/\1 /p")\[\033[01;35m\]\$\[\033[00m\] '
fi

LANG=en_US.UTF-8
LANGUAGE=en_US:en
LC_CTYPE=en_US.UTF-8
LC_NUMERIC=en_US.UTF-8
LC_TIME=en_US.UTF-8
LC_COLLATE=en_US.UTF-8
LC_MONETARY=en_US.UTF-8
LC_MESSAGES=en_US.UTF-8
LC_PAPER=en_US.UTF-8
LC_NAME=en_US.UTF-8
LC_ADDRESS=en_US.UTF-8
LC_TELEPHONE=en_US.UTF-8
LC_MEASUREMENT=en_US.UTF-8
LC_IDENTIFICATION=en_US.UTF-8
LC_ALL=
